<script>
  const notify = (msg, color = "red", pos = "right", grav = "top") => {
    Toastify({
      text: msg,
      close: true,
      position: pos,
      graity: grav,
      style:{
        background: color
      }
    }).showToast();
  };

  //Tábla generálása
  function toTable(data, edit=false, header = []) {
    const keys = Object.keys(data[0]);
    let string = `<table class="table"><thead>`;
    string += `<tr>` 
    let th = (header.length == 0) ? keys : header
    th.forEach(element => {
      string += `<th>${element}</th>`;
    });
    if(edit) string+= `<th class="text-center">Edit</th>`;

    string += `</tr></thead><tbody>`

    for (let i = 0; i < data.length; i++) {
      string += `<tr class="sor">`
      keys.forEach(key => {
        string += `<td class="_${key}">${(data[i][key] != null) ? data[i][key] : "-"}</td>`;
      });
      if(edit) string+= `<td style="cursor:pointer" class=""><i class="bi bi-gear" onclick="edit_push(${i})"></i></td>`;
      string += `</tr>`
      
    }
    string += `</tbody></table>`

    return string;
  }

  //A táblázat sorait beszinezi egy megadott szempont alapján
  function tableColor(items, item, param) {
    for (let i = 0; i < $('.sor').length; i++) {
      $('.sor').eq(i).removeClass("green").removeClass("red");
      $('.sor').eq(i).addClass((items[i][item] == param) ? "green" : "red");
    }
  }

  //Elrejti a táblázat egy oszlopát
  function tableHide(item) {
    $(`._${item}`).hide();
  }

  //A táblázat egyes elemeit lehet szerkeszteni egy megadott szempont alapján
  function tableItemEdit(item, param, result1, result2 = null) {
    if(result2 == null) result2 = result1;

    for (let i = 0; i < $(`._${item}`).length; i++) {
      let text = $(`._${item}`).eq(i).html();
      $(`._${item}`).eq(i).html((text == param) ? eval(result1) : eval(result2));
    }
  }

  function tableFilter(items, item, param) {
    
  }
</script>